{"version":3,"sources":["Components/NabBar/NavBar.js","Components/Upload/Upload.js","Components/Present/Present.js","Components/Remote/Remote.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["NavBar","react_default","a","createElement","href","Upload","_ref","registerUpload","id","action","onSubmit","e","preventDefault","target","files","for","type","name","accept","value","pdfjs","GlobalWorkerOptions","workerSrc","concat","version","Present","filePath","pageNumber","onDocumentLoadSuccess","handlePageIncrease","handlePageDecrease","entry","file","onLoadSuccess","onClick","Remote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCode","state","socket","emit","next","previous","connection","code","remoteOn","_this2","io","window","origin","on","setState","keyVal","_this$state","React","Component","App","URL","createObjectURL","console","log","numPages","currentPage","maxPages","_this$state2","NabBar_NavBar","Components_Present_Present","Components_Remote_Remote","Components_Upload_Upload","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","Error","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.315311a2.chunk.js","sourcesContent":["import React from 'react'\n\nconst NavBar = () => {\n  return (\n    <nav>\n      <a href=\"/remote\">Remote</a>\n    </nav>\n  )\n}\n\nexport default NavBar","import React from 'react'\n\nconst Upload = ({ registerUpload }) => {\n\n  let handleSubmit = e => {\n    e.preventDefault()\n    registerUpload(e.target['pdf'].files[0])\n  }\n\n  return (\n    <div>\n      <form id='file-upload' action='' onSubmit={handleSubmit}>\n        <label for='pdf'>Upload PDF</label>\n        <input type='file' name='pdf' accept='application/pdf' />\n        <input type='submit' value='Upload' />\n      </form>\n    </div>\n  )\n}\n\nexport default Upload","import React from 'react'\nimport { pdfjs, Document, Page } from 'react-pdf'\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`\n\nconst Present = ({filePath, pageNumber, onDocumentLoadSuccess, handlePageIncrease, handlePageDecrease}) => {\n  return (\n    <div id='present'>\n      <Document\n        file={filePath}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        <Page pageNumber={pageNumber} />\n      </Document>\n      <button onClick={handlePageDecrease}>-</button>\n      <button onClick={handlePageIncrease}>+</button>\n    </div>\n  )\n}\n\nexport default Present","import React from 'react'\nimport io from 'socket.io-client'\n\nclass Remote extends React.Component {\n  constructor(props) {\n    super()\n    this.state = {\n      next: props.handlePageIncrease,\n      previous: props.handlePageDecrease,\n      socket: null,\n      connection: false,\n      code: null,\n      remoteOn: false\n    }\n  }\n\n  componentDidMount() {\n    let socket = io(`${window.origin}`)\n\n    socket.on('connect', () => {\n      this.setState({\n        socket: socket,\n        connection: true\n      })\n    })\n\n    socket.on('disconnect', () => {\n      this.setState({\n        socket: null,\n        connection: false\n      })\n    })\n\n    socket.on('clientRegistered', e => {\n      if (e.keyVal) {\n        this.setState({\n          code: e.keyVal\n        })\n      }\n    })\n\n    socket.on('remoteConnected', () => {\n      this.setState({\n        remoteOn: true\n      })\n    })\n\n    socket.on('increment', () => {\n      this.state.next()\n    })\n\n    socket.on('decrement', () => {\n      this.state.previous()\n    })\n  }\n\n  getCode = () => {\n    this.state.socket.emit('registerAsClient')\n  }\n\n  render() {\n\n    let { remoteOn, code, connection } = this.state\n\n    return (\n      <div id='remote'>\n        <h3>Remote:</h3>\n        {(!remoteOn && !code && connection) ? (\n          <button onClick={this.getCode}>Get Code!</button>\n        ) : null}\n\n        {(!remoteOn && code && connection) ? (\n          <h3>Code: {code}</h3>\n        ) : null}\n\n        {(remoteOn && code && connection) ? (\n          <h2>Remote is connected</h2>\n        ) : null}\n      </div>\n    )\n  }\n}\n\nexport default Remote","import React from 'react';\nimport NavBar from './Components/NabBar/NavBar'\nimport Upload from './Components/Upload/Upload'\nimport Present from './Components/Present/Present'\nimport Remote from './Components/Remote/Remote'\n\nimport './App.css'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      file: null,\n      filePath: null,\n      currentPage: null,\n      maxPages: null\n    }\n  }\n\n  // Save the upload in the state\n  registerUpload = file => {\n    this.setState({\n      file: file,\n      filePath: URL.createObjectURL(file)\n    }, () => {\n      console.log(this.state)\n    })\n  }\n\n  // Save maximum pages in the state\n  onDocumentLoadSuccess = ({numPages}) => {\n    this.setState({\n      currentPage: 1,\n      maxPages: numPages\n    })\n  }\n\n  // Increment the page\n  handlePageIncrease = () => {\n\t\tlet { currentPage, maxPages } = this.state\n\t\tthis.setState({\n\t\t\tcurrentPage:  currentPage % maxPages + 1\n\t\t})\n\t}\n\n  // Decrement the page\n\thandlePageDecrease = () => {\n\t\tlet { currentPage, maxPages } = this.state\n\t\tthis.setState({\n\t\t\tcurrentPage: currentPage - 1 || maxPages\n\t\t})\n\t}\n\n  render() {\n\n    if (this.state.file) {\n      // If file is uploaded\n      // Render this section\n      return (\n        <div>\n          <NavBar />\n    \n          <Present\n            filePath={this.state.filePath}\n            pageNumber={this.state.currentPage}\n            onDocumentLoadSuccess={this.onDocumentLoadSuccess}\n            handlePageDecrease={this.handlePageDecrease}\n            handlePageIncrease={this.handlePageIncrease}\n          />\n\n          <Remote\n            handlePageDecrease={this.handlePageDecrease}\n            handlePageIncrease={this.handlePageIncrease}\n          />\n        </div>\n      )\n\n    } else {\n      // Provide interface to upload file\n      return (\n        <div>\n          <NavBar />\n    \n          <Upload registerUpload={this.registerUpload} />\n        </div>\n      )\n\n    }   \n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 24;"],"sourceRoot":""}