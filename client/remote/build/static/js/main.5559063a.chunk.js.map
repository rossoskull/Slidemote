{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","setState","code","target","value","state","length","isNaN","codeErrorMsg","codeError","handleSubmit","preventDefault","socket","emit","keyVal","handleIncrement","handleDecrement","connection","remoteOn","_this2","io","concat","window","origin","on","console","log","_this$state","react_default","a","createElement","id","onClick","onSubmit","onChange","name","type","placeholder","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAwGeA,cApGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAwCFI,YAAc,SAAAC,GACZR,EAAKS,SAAS,CACZC,KAAMF,EAAEG,OAAOC,OACd,WAC8B,IAA3BZ,EAAKa,MAAMH,KAAKI,QAAgBC,MAAMf,EAAKa,MAAMH,MACnDV,EAAKS,SAAS,CACZO,aAAc,gCACdC,WAAW,IAGbjB,EAAKS,SAAS,CACZQ,WAAW,EACXD,aAAc,UArDHhB,EA2DnBkB,aAAe,SAAAV,GACbA,EAAEW,iBACFnB,EAAKa,MAAMO,OAAOC,KAAK,mBAAoB,CAACC,OAAQtB,EAAKa,MAAMH,QA7D9CV,EAgEnBuB,gBAAkB,SAAAf,GAChBR,EAAKa,MAAMO,OAAOC,KAAK,YAAa,CAACC,OAAQtB,EAAKa,MAAMH,QAjEvCV,EAoEnBwB,gBAAkB,SAAAhB,GAChBR,EAAKa,MAAMO,OAAOC,KAAK,YAAa,CAACC,OAAQtB,EAAKa,MAAMH,QAnExDV,EAAKa,MAAQ,CACXY,YAAY,EACZL,OAAQ,KACRM,UAAU,EACVhB,KAAM,GACNO,WAAW,EACXD,aAAc,IARChB,mFAYC,IAAA2B,EAAAxB,KACdiB,EAASQ,IAAE,GAAAC,OAAIC,OAAOC,SAE1BX,EAAOY,GAAG,UAAW,WACnBL,EAAKlB,SAAS,CACZgB,YAAY,EACZL,OAAQA,MAIZA,EAAOY,GAAG,aAAc,WACtBL,EAAKlB,SAAS,CACZgB,YAAY,EACZL,OAAQ,KACRM,UAAU,MAIdN,EAAOY,GAAG,kBAAmB,WAC3BL,EAAKlB,SAAS,CACZiB,UAAU,MAIdN,EAAOY,GAAG,oBAAqB,WAC7BC,QAAQC,IAAI,mEAmCP,IAAAC,EAEiDhC,KAAKU,MAAvDY,EAFCU,EAEDV,WAAYC,EAFXS,EAEWT,SAAUT,EAFrBkB,EAEqBlB,UAAWD,EAFhCmB,EAEgCnB,aAEvC,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,sCAA8Bb,EAAa,YAAc,iBAEvDA,GAAcC,EACdU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,QAASrC,KAAKqB,iBAAtB,KADF,QAEEY,EAAAC,EAAAC,cAAA,UAAQE,QAASrC,KAAKoB,iBAAtB,MAGFa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMG,SAAUtC,KAAKe,cACnBkB,EAAAC,EAAAC,cAAA,SAAOI,SAAUvC,KAAKI,YAAaoC,KAAK,OAAOC,KAAK,OAAOC,YAAY,eACtE5B,EAAamB,EAAAC,EAAAC,cAAA,SAAItB,GAAqB,KACvCoB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAAShC,MAAM,UAAUkC,SAAU7B,cA3F3C8B,IAAMC,WCSJC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5559063a.chunk.js","sourcesContent":["import React from 'react'\nimport io from 'socket.io-client'\n\nclass App extends React.Component {\n  constructor(props) {\n    super()\n    this.state = {\n      connection: false,\n      socket: null,\n      remoteOn: false,\n      code: '',\n      codeError: true,\n      codeErrorMsg: ''\n    }\n  }\n\n  componentDidMount() {\n    let socket = io(`${window.origin}`)\n    \n    socket.on('connect', () => {\n      this.setState({\n        connection: true,\n        socket: socket\n      })\n    })\n\n    socket.on('disconnect', () => {\n      this.setState({\n        connection: false,\n        socket: null,\n        remoteOn: false\n      })\n    })\n\n    socket.on('remoteConnected', () => {\n      this.setState({\n        remoteOn: true\n      })\n    })\n\n    socket.on('remoteRegNoClient', () => {\n      console.log('No client with that ID found')\n    })\n  }\n\n  handleInput = e => {\n    this.setState({\n      code: e.target.value\n    }, () => {\n      if (this.state.code.length !== 6 || isNaN(this.state.code)) {\n        this.setState({\n          codeErrorMsg: 'Must be a number of 6 digits.',\n          codeError: true\n        })\n      } else {\n        this.setState({\n          codeError: false,\n          codeErrorMsg: null\n        })\n      }\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.state.socket.emit('registerAsRemote', {keyVal: this.state.code})\n  }\n\n  handleIncrement = e => {\n    this.state.socket.emit('increment', {keyVal: this.state.code})\n  }\n\n  handleDecrement = e => {\n    this.state.socket.emit('decrement', {keyVal: this.state.code})\n  }\n\n  render() {\n\n    let { connection, remoteOn, codeError, codeErrorMsg } = this.state \n\n    return (\n      <div id='App'>\n        <p>Server connection status: {connection ? 'Connected' : 'Not Connected'}</p>\n\n        {(connection && remoteOn) ? (\n          <div>\n            <button onClick={this.handleDecrement}>-</button> &nbsp;\n            <button onClick={this.handleIncrement}>+</button>\n          </div>\n        ) : (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <input onChange={this.handleInput} name=\"code\" type=\"text\" placeholder=\"Enter code\" />\n              {codeError ? (<i>{codeErrorMsg}</i>) : null}\n              <input type=\"submit\" value=\"Connect\" disabled={codeError}/>\n            </form>\n          </div>\n        )}\n\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}